program           =  program IDENT ; block "." .
block             =  declarations compound-stmt .

declarations      =  [const-decls] [var-decls] [procfn-decls]
ident-list        =  IDENT { "," IDENT } 
var-decls         =  "var" var-decl ";" { var-decl ";" } .
const-decls       =  "const" const-decl ";" { const-decl ";" } .
const-decl        =  ident = (NUMBER | STRING | CHAR | BOOLEAN) .
procfn-decls      =  { proc-decl | func-decl }
var-decl          =  ident-list ":" type .
proc-decl         =  "procedure" IDENT paramlist; block ";" .
func-decl         =  "function" IDENT paramlist ":" type; block ";" .
paramlist         =  "(" var-decl { "," var-decl } ")"

statement         =  write-stmt | read-stmt | assign-stmt | call-stmt |
                     if-stmt | while-stmt | repeat-stmt | compound-stmt | for-stmt 
write-stmt        =  ( "writeln" | "write" ) arglist .
read-stmt         =  "read" "(" identlist ")" .
assign-stmt       =  IDENT ":=" expression .
call-stmt         =  IDENT arglist .
if-stmt           =  "if" expression "then" statement [ "else" statement ] .
while-stmt        =  "while" expression "do" statement .
repeat-stmt       =  "repeat" statement { ";" statement } "until" expression .
compound-stmt     =  "begin" [ statement { ";" statement } ] "end" .
for-stmt          =  "for" IDENT ":=" expression ( "to" | "downto" ) expression "do" statement .
break-stmt        =  "break" [ INTEGER ] .

expression        =  equality .
equality          =  comparison [ ( "=" | "<>" ) comparison ] .
comparison        =  term [ ( "<" | "<=" | ">" | ">=" ) term ] .
term              =  factor { ( "+" | "-" | "or" ) factor } .
factor            =  unary { ( "*" | "/" | "and" | "mod" ) unary } .
unary             =  ( "-" | "+" ) unary | primary .
primary           =  IDENT | literal | "(" expression ")" | "not" primary | IDENT arglist .
arglist           =  "(" [ expression { "," expression } ] ")" .
literal           =  INTEGER | REAL | STRING | CHAR | BOOLEAN .
    